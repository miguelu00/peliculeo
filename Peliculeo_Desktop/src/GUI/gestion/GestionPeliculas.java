/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI.gestion;
import Controlador.ControladorPeliculas;
import GUI.Utiles.Vistas;
import GUI.pantallaPpal;
import gestionPeliculas.dto.Pelicula;
import java.awt.Color;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
/**
 *
 * @author Miguelañez-PC
 */
public class GestionPeliculas extends javax.swing.JDialog {

    pantallaPpal padre;
    ListModel<String> modeloListaP;
    
    /**
     * Creates new form GestionClientes
     */
    public GestionPeliculas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        padre = (pantallaPpal) parent;
        this.modeloListaP = this.jListPeliculas.getModel();
        
        getListadoPeliculas();
        this.setLocationRelativeTo(null);
        //Descartado - Hacer el texto vertical con clase sacada de StackOverflow (fuente => https://stackoverflow.com/questions/14777926/java-how-to-make-a-jlabel-with-vertical-text )
        //this.jLabelTitle.setUI(new VerticalLabelUI(true));
        this.setVisible(true);
        cargarAyudaJH();
    }

    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2Lista = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPeliculas = new javax.swing.JList<>();
        jPanel1Controles = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jPanel3Botones = new javax.swing.JPanel();
        jButtonModificar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GESTIONAR PELICULAS");
        setMinimumSize(new java.awt.Dimension(444, 300));
        setResizable(false);

        jPanel2Lista.setLayout(new java.awt.CardLayout());

        jListPeliculas.setToolTipText("Haz clic en una Película para seleccionarla");
        jListPeliculas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListPeliculasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListPeliculas);

        jPanel2Lista.add(jScrollPane1, "card2");

        getContentPane().add(jPanel2Lista, java.awt.BorderLayout.CENTER);

        jPanel1Controles.setLayout(new java.awt.BorderLayout());

        jLabelTitle.setFont(new java.awt.Font("Source Sans Pro Semibold", 3, 36)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("PELICULAS");
        jLabelTitle.setToolTipText("Selecciona una PELÍCULA de la lista para modificar o eliminarla");
        jLabelTitle.setAlignmentY(0.0F);
        jLabelTitle.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 102), 2), javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10)));
        jLabelTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1Controles.add(jLabelTitle, java.awt.BorderLayout.PAGE_START);

        jPanel3Botones.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 2, true));
        jPanel3Botones.setLayout(new java.awt.GridBagLayout());

        jButtonModificar.setBackground(new java.awt.Color(255, 255, 102));
        jButtonModificar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/gestionPeli.png"))); // NOI18N
        jButtonModificar.setText("Modificar");
        jButtonModificar.setToolTipText("Debes seleccionar una película antes de poder Modificar");
        jButtonModificar.setEnabled(false);
        jButtonModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonModificarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonModificarMouseExited(evt);
            }
        });
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3Botones.add(jButtonModificar, gridBagConstraints);

        jButtonEliminar.setBackground(new java.awt.Color(255, 102, 102));
        jButtonEliminar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/eliminar.png"))); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setToolTipText("Debes seleccionar una película antes de poder Eliminar");
        jButtonEliminar.setEnabled(false);
        jButtonEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonEliminarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonEliminarMouseExited(evt);
            }
        });
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3Botones.add(jButtonEliminar, gridBagConstraints);

        jPanel1Controles.add(jPanel3Botones, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1Controles, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonModificarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonModificarMouseEntered
        evt.getComponent().setBackground(Color.YELLOW);
        evt.getComponent().setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonModificarMouseEntered

    private void jButtonEliminarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarMouseExited
        evt.getComponent().setBackground(new Color(255,102,102));
        evt.getComponent().setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonEliminarMouseExited

    private void jButtonModificarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonModificarMouseExited
        evt.getComponent().setBackground(new Color(255,255,102));
        evt.getComponent().setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonModificarMouseExited

    private void jButtonEliminarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarMouseEntered
        evt.getComponent().setBackground(Color.RED);
        evt.getComponent().setForeground(Color.WHITE);
    }//GEN-LAST:event_jButtonEliminarMouseEntered

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        String selectedItem = this.jListPeliculas.getSelectedValue();
        int selectedIndex = this.jListPeliculas.getSelectedIndex();
        if (this.jListPeliculas.getSelectedIndices().length > 1) {
            mostrarError("Para modificar, SELECCIONAR SOLAMENTE UNA PELÍCULA POR FAVOR!", "Imposible Editar!");
        }
        //Comprobar si no hemos seleccionado nada en la lista, o bien si lo seleccionado está vacío
        if (selectedItem == null) {
            mostrarError("Ninguna película seleccionada!", "Seleccione una película!");
            return;
        }
        if (selectedItem.isEmpty() || selectedItem.isBlank()) {
            mostrarError("Ninguna película con datos seleccionado!", "Seleccione una película válida!");
            return;
        }
        
        ModificarPelicula modif = new ModificarPelicula(padre, true, ControladorPeliculas.getListaPeliculas().get(selectedIndex));
        modif.setVisible(true);
        //La línea anterior detiene la ejecución, hasta que se cierra el JDialog. Así que, acto seguido...
        getListadoPeliculas(); //...actualizamos la lista de Peliculas (la JList)
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jListPeliculasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListPeliculasValueChanged
        this.jButtonEliminar.setEnabled(true);
        this.jButtonModificar.setEnabled(true);
    }//GEN-LAST:event_jListPeliculasValueChanged

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        String selectedItem = this.jListPeliculas.getSelectedValue();
        int filaSeleccionada = this.jListPeliculas.getSelectedIndex();
        int[] indices = this.jListPeliculas.getSelectedIndices();
        //Si seleccionamos más de una película...
        if (indices.length > 1) {
            Pelicula peliSelect = null;
            for (int indice: indices) {
                peliSelect = ControladorPeliculas.getListaPeliculas().get(indice);
                //Comprobar primero, si no hemos seleccionado nada...
                if (peliSelect == null) {
                    mostrarError("Ninguna película seleccionada de la lista!", "Seleccione una película!");
                    return;
                }
                //o si, en cualquier caso, lo seleccionado está vacío
                if (peliSelect.toString().isEmpty() || peliSelect.toString().isBlank()) {
                    mostrarError("Ninguna película con datos seleccionado!", "Seleccione una película válida!");
                    return;
                }
                
                if (JOptionPane.showConfirmDialog(rootPane, "¿Eliminar la película " + peliSelect.getCodPelicula() +"?"
                    + "\n(Se eliminarán también todas los Tickets para esa película).") != JOptionPane.CANCEL_OPTION) {
                    //Borrar la pelicula seleccionada, y actualizar Lista
                    Pelicula peliBorrada = ControladorPeliculas.eliminarPeliculaPorCOD(peliSelect.getCodPelicula());
                    if (peliBorrada != null) {
                        this.jListPeliculas.remove(filaSeleccionada);
                        this.jListPeliculas.repaint(); //Actualizamos la lista después de cambiar su contenido / eliminar en este caso
                        padre.actualizarListaTICKETS();//Igual con la tabla de Tickets
                    }
                }
            }
            return;
        } else if (indices.length == 0) {
            Vistas.mostrarErrorGUI(rootPane, "SELECCIONA UNA PELÍCULA!", "Seleccione primero una película para Eliminarla!");
            return;
        }
        Pelicula peliculaABorrar = ControladorPeliculas.getListaPeliculas().get(filaSeleccionada);
        
        //Coger el código de la película
        
        if (JOptionPane.showConfirmDialog(rootPane, "¿Eliminar la película " + peliculaABorrar.getCodPelicula() +"?"
                + "\n(Se eliminarán también todos los Tickets para esa película).", "CONFIRMACIÓN BORRADO", JOptionPane.OK_CANCEL_OPTION) != JOptionPane.CANCEL_OPTION) {
            //Borrar la pelicula seleccionada, y actualizar Lista
            Pelicula peliBorrada = ControladorPeliculas.eliminarPeliculaPorCOD(peliculaABorrar.getCodPelicula());
            if (peliBorrada != null) {
                this.jListPeliculas.remove(filaSeleccionada);
                this.jListPeliculas.repaint(); //Actualizamos la lista después de cambiar su contenido / eliminar en este caso
                padre.actualizarListaTICKETS();//Igual con la tabla de Reservas
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void mostrarError(String msg, String title) {
        JOptionPane.showMessageDialog(this, msg, title, JOptionPane.ERROR_MESSAGE);
    }
    private void mostrarInfo(String msg, String title) {
        JOptionPane.showMessageDialog(this, msg, title, JOptionPane.INFORMATION_MESSAGE);
    }
    private void mostrarMsgPlano(String msg, String title) {
        JOptionPane.showMessageDialog(this, msg, title, JOptionPane.PLAIN_MESSAGE);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GestionPeliculas dialog = new GestionPeliculas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public void getListadoPeliculas() {
        List<Pelicula> listaPeliculas = ControladorPeliculas.getListaPeliculas();
        DefaultListModel<String> listaNueva = new DefaultListModel<String>();
        listaNueva.removeAllElements(); //limpiar lista
        for (Pelicula p: listaPeliculas) {
            listaNueva.addElement(p.toString());
        }
        this.jListPeliculas.setModel(listaNueva); //agregamos el modelo con los datos a la lista
        this.jListPeliculas.repaint();
    }
    
    /**
     * Habilitará el acceso a la ayuda de JavaHelp para esta ventana de la aplicación.
     */
    private void cargarAyudaJH() {
        try {
            // Carga el fichero de ayuda
            File fichero = new File("src" + File.separator + "help" + File.separator + "help.hs");
            URL hsURL = fichero.toURI().toURL();

            // Crea el HelpSet y el HelpBroker
            HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();

            // Activar la ayuda para cada elemento que deseemos que la tenga asociada
            hb.enableHelpKey(this.getContentPane(), "ayudaGestionPeliculas", helpset); //abrirá la ayuda para getión de Películas
        } catch (HelpSetException hsExc) {
            System.err.println(hsExc.getMessage());
        } catch (MalformedURLException urlErr) {
            System.err.println("Formato de URL incorrecto!");
            System.err.println(urlErr.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JList<String> jListPeliculas;
    private javax.swing.JPanel jPanel1Controles;
    private javax.swing.JPanel jPanel2Lista;
    private javax.swing.JPanel jPanel3Botones;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
