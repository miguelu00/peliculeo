/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Controlador.ControladorClientes;
import GUI.gestion.ModificarCliente2;
import GUI.gestion.ModificarCliente;
import GUI.gestion.EliminarCliente;
import Controlador.ControladorPeliculas;
import GUI.gestion.AltaCliente;
import GUI.gestion.NuevaPelicula;
import Controlador.ControladorTickets;
import Exceptions.ErrorListadoClientesException;
import GUI.Utiles.Vistas;
import GUI.gestion.GestionPeliculas;
import GUI.gestion.NuevoTicket;
import gestionPeliculas.dto.Cliente;
import gestionPeliculas.dto.Pelicula;
import gestionPeliculas.dto.Ticket;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * Ejercicio de Gestion de Clientes, modificado para aceptar el cambio del tema de Swing (Look&Feel), mediante una
 * lista desplegable / JComboBox, situada en el menú principal.
 * 
 * TODO --> AGREGAR AYUDA EN GUI
 * @author Miguelañez-PC
 */
public class pantallaPpal extends javax.swing.JFrame {
    
    //Array para almacenar más tarde, en el constructor, los distintos temas L&F instalados en NetBeans
    UIManager.LookAndFeelInfo[] temasLAF = null;
    
    private String usuario = "";
    private static final String ICONO_APP = "src/icon.png";
    private DefaultTableModel modeloTablaESTRENOS;
    private DefaultTableModel modeloTablaTICKETS;
    
    private boolean viendoCartelera = false;
    /**
     * Creates new form pantallaPpal
     */
    public pantallaPpal() {
        initComponents();
        this.setLocationRelativeTo(null); //Linea para centrar la ventana
        //Cambiar el icono de la aplicación
        try {
            this.setIconImage(ImageIO.read(new File(ICONO_APP).getAbsoluteFile()));
        } catch (IOException errIO) {
            System.err.println("ERROR AL MOSTRAR EL ICONO DE LA APP");
            errIO.printStackTrace();
        }
        
        cargarListadoLookAndFeel();
        mostrarFotoPerfilDF();//hacer que la foto de perfil muestre una por defecto
        cargarAyudaJH(); //Cargar la ayuda de JavaHelp.
        inicializarTablaTICKETS();
        actualizarListaTICKETS();
        }
    
    public void mostrarFotoPerfilDF() {
        this.customFotoPerfil.setImgRoot("src/GUI/imgs/fotoPerfil.png");
    }
    
    public void setImgPerfil(String imgUri) {
        this.customFotoPerfil.setImgRoot(imgUri);
    }
    
    public void cargarListadoLookAndFeel() {
        //Actualizar temas LookAndFeel con los instalados en el sistema / netbeans
        temasLAF = UIManager.getInstalledLookAndFeels();
        DefaultComboBoxModel model = new DefaultComboBoxModel(temasLAF); //DefaultComboBoxModel sin operador de diamante, sino no se le podría pasar el array de LookAndFeelInfo[] directamente
        this.jComboBox1LookAndFeel.setModel(
                  model
        );
        
        //Recoger el tema actual elegido (por defecto) y hacer que sea el seleccionado en el ComboBox
        // actualizar también los nombres insertados en el ComboBox; eliminando los elementos vacíos (primer index en este caso)
        String temaActual = UIManager.getLookAndFeel().getName();
        int longitudTemasLAF = temasLAF.length;
        for (int index = 0; index < longitudTemasLAF; index++) {
            UIManager.LookAndFeelInfo info = temasLAF[index];
            model.addElement(info.getName());
            if (info.getName().equals(temaActual)) {
                model.setSelectedItem(info);
            }
            model.removeElementAt(0);
        }
        
        try {
            //Settear el tema principal como el de 'Nimbus'
            UIManager.setLookAndFeel(temasLAF[4].getClassName());
        } catch (ClassNotFoundException cnotFound) {
            
        } catch (Exception e) {
            System.err.println("Se ha producido un error extraño al aplicar el tema Nimbus");
        }
    }

    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        customFotoPerfil = new pruebaimageresize_cambio.CustomJLabelImagen();
        jButtonToggleMain = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListaTickets = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1LookAndFeel = new javax.swing.JComboBox<>();
        jButtonAgregarX = new javax.swing.JButton();
        jButtonEliminarX = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuPeliculas = new javax.swing.JMenu();
        jMInuevaPelicula = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuClientes = new javax.swing.JMenu();
        jMIEditarCliente = new javax.swing.JMenuItem();
        jMIEliminarCliente = new javax.swing.JMenuItem();
        jMIgestionPeliculas = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuItemAyuda = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuConfig = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Peliculeo! Desktop - Gestión");
        setMinimumSize(new java.awt.Dimension(665, 550));
        setPreferredSize(new java.awt.Dimension(665, 550));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jKeyReleaseHandlerATRAS(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        customFotoPerfil.setToolTipText("Doble clic para Editarme!");
        customFotoPerfil.setMaximumSize(new java.awt.Dimension(100, 100));
        customFotoPerfil.setMinimumSize(new java.awt.Dimension(100, 100));
        customFotoPerfil.setOpaque(true);
        customFotoPerfil.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.weighty = 0.1;
        jPanel3.add(customFotoPerfil, gridBagConstraints);

        jButtonToggleMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/actualizarMain.png"))); // NOI18N
        jButtonToggleMain.setText("VER CARTELERA");
        jButtonToggleMain.setToolTipText("Clic -> Cambiar entre la Vista de CARTELERA y TICKETS");
        jButtonToggleMain.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonToggleMain.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonToggleMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToggleMainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.2;
        jPanel3.add(jButtonToggleMain, gridBagConstraints);

        jTableListaTickets.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTableListaTickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Ticket", "Película", "Fecha de Emision", "NIF_Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListaTickets.setCellSelectionEnabled(true);
        jTableListaTickets.setDragEnabled(true);
        jTableListaTickets.setPreferredSize(new java.awt.Dimension(250, 300));
        jTableListaTickets.getTableHeader().setReorderingAllowed(false);
        jTableListaTickets.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableListaTicketsPRESIONAA(evt);
                jTableListaTicketsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListaTickets);
        jTableListaTickets.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Tema");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 9;
        jPanel2.add(jLabel1, gridBagConstraints);

        jComboBox1LookAndFeel.setFont(new java.awt.Font("SimHei", 0, 14)); // NOI18N
        jComboBox1LookAndFeel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Item 2", "Item 3", "Item 4" }));
        jComboBox1LookAndFeel.setMaximumSize(new java.awt.Dimension(300, 25));
        jComboBox1LookAndFeel.setPreferredSize(new java.awt.Dimension(173, 22));
        jComboBox1LookAndFeel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedEvent(evt);
            }
        });
        jComboBox1LookAndFeel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1LookAndFeelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1LookAndFeelKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBox1LookAndFeelKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 21, 0, 21);
        jPanel2.add(jComboBox1LookAndFeel, gridBagConstraints);

        jButtonAgregarX.setForeground(new java.awt.Color(51, 204, 0));
        jButtonAgregarX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/agregar.png"))); // NOI18N
        jButtonAgregarX.setText("SACAR UN TICKET");
        jButtonAgregarX.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jButtonAgregarX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarXActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jButtonAgregarX, gridBagConstraints);

        jButtonEliminarX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/eliminar.png"))); // NOI18N
        jButtonEliminarX.setText("ELIMINAR TICKET");
        jButtonEliminarX.setEnabled(false);
        jButtonEliminarX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarXActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonEliminarX, new java.awt.GridBagConstraints());

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuPeliculas.setText("Nuevo");
        jMenuPeliculas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuPeliculas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenuPeliculasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenuPeliculasMouseExited(evt);
            }
        });

        jMInuevaPelicula.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMInuevaPelicula.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMInuevaPelicula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/agregarPeli.png"))); // NOI18N
        jMInuevaPelicula.setText("Nueva pelicula...");
        jMInuevaPelicula.setToolTipText("Abrir la ventana para agregar una PELÍCULA");
        jMInuevaPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMInuevaPeliculaActionPerformed(evt);
            }
        });
        jMenuPeliculas.add(jMInuevaPelicula);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/agregar.png"))); // NOI18N
        jMenuItem1.setText("Alta CLIENTE...");
        jMenuItem1.setToolTipText("Abrir una ventana para DAR de ALTA a un CLIENTE en el sistema");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuPeliculas.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/confirmarEDIT.png"))); // NOI18N
        jMenuItem2.setText("Cerrar Sesión");
        jMenuItem2.setToolTipText("Abrir una ventana para DAR de ALTA a un CLIENTE en el sistema");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuPeliculas.add(jMenuItem2);

        jMenuBar1.add(jMenuPeliculas);

        jMenuClientes.setText("Editar");
        jMenuClientes.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuClientes.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
                jMenuClientesMenuDeselected(evt);
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jSelectedHandler(evt);
            }
        });
        jMenuClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenuClientesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenuClientesMouseExited(evt);
            }
        });

        jMIEditarCliente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMIEditarCliente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMIEditarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/editar.png"))); // NOI18N
        jMIEditarCliente.setText("Modificar CLIENTE...");
        jMIEditarCliente.setToolTipText("Editar datos de un CLIENTE ya existente");
        jMIEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEditarClienteActionPerformed(evt);
            }
        });
        jMenuClientes.add(jMIEditarCliente);

        jMIEliminarCliente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMIEliminarCliente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMIEliminarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/eliminar.png"))); // NOI18N
        jMIEliminarCliente.setText("Eliminar CLIENTE...");
        jMIEliminarCliente.setToolTipText("Eliminar a un CLIENTE del sistema");
        jMIEliminarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMIEliminarClienteMouseClicked(evt);
            }
        });
        jMIEliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEliminarClienteActionPerformed(evt);
            }
        });
        jMenuClientes.add(jMIEliminarCliente);

        jMIgestionPeliculas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMIgestionPeliculas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMIgestionPeliculas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/gestionPeli.png"))); // NOI18N
        jMIgestionPeliculas.setText("Gestionar PELÍCULAS");
        jMIgestionPeliculas.setToolTipText("Editar o eliminar PELÍCULAS del sistema");
        jMIgestionPeliculas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIgestionPeliculasActionPerformed(evt);
            }
        });
        jMenuClientes.add(jMIgestionPeliculas);

        jMenuBar1.add(jMenuClientes);

        jMenuAyuda.setText("Ayuda");
        jMenuAyuda.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenuAyudaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenuAyudaMouseExited(evt);
            }
        });

        jMenuItemAyuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItemAyuda.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemAyuda.setText("Ayuda de la App");
        jMenuItemAyuda.setToolTipText("Mostrar la ventana de Ayuda");
        jMenuAyuda.add(jMenuItemAyuda);
        jMenuAyuda.add(jSeparator1);

        jMenuConfig.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/configIcon3.png"))); // NOI18N
        jMenuConfig.setText("Acerca de...");
        jMenuConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuConfigActionPerformed(evt);
            }
        });
        jMenuAyuda.add(jMenuConfig);

        jMenuBar1.add(jMenuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarClienteActionPerformed
        //Jdialog para eliminar usuario
        EliminarCliente ventanaElim = new EliminarCliente(this, true);
        ventanaElim.setVisible(true);
    }//GEN-LAST:event_jMIEliminarClienteActionPerformed

    private void jMIEliminarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMIEliminarClienteMouseClicked
        
    }//GEN-LAST:event_jMIEliminarClienteMouseClicked

    private void jKeyReleaseHandlerATRAS(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jKeyReleaseHandlerATRAS
        
    }//GEN-LAST:event_jKeyReleaseHandlerATRAS

    private void jMenuClientesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuClientesMouseEntered
        this.jMenuClientes.setForeground(Color.RED);
    }//GEN-LAST:event_jMenuClientesMouseEntered

    private void jMenuClientesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuClientesMouseExited
        this.jMenuClientes.setForeground(Color.BLACK);
    }//GEN-LAST:event_jMenuClientesMouseExited

    private void jSelectedHandler(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jSelectedHandler
        this.jMenuClientes.setForeground(Color.WHITE);
    }//GEN-LAST:event_jSelectedHandler

    private void jMenuClientesMenuDeselected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuClientesMenuDeselected
        this.jMenuClientes.setForeground(Color.BLACK);
    }//GEN-LAST:event_jMenuClientesMenuDeselected

    /**
     * Evento que se lanzara cuando especifiquemos otro tema en la lista desplegable de temas
     * @param evt
     */
    private void actionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedEvent
        String temaSeleccionado = jComboBox1LookAndFeel.getSelectedItem().toString();
        for (int i=0; i<temasLAF.length; i++) {
            if (temasLAF[i].getName() == temaSeleccionado) {
                try {
                    UIManager.setLookAndFeel(temasLAF[i].getClassName());
                    SwingUtilities.updateComponentTreeUI(this);
                } catch (ClassNotFoundException ex) {
                    System.err.println("ERROR. CLASE DEL LOOK&FEEL NO ENCONTRADA!");
                } catch (InstantiationException ex) {
                    System.err.println("ERROR AL INSTANCIAR LA CLASE DEL LOOK&FEEL SELECCIONADO!");
                } catch (IllegalAccessException ex) {
                    System.err.println("ACCESO DENEGADO AL CAMBIAR EL L&F!");
                } catch (UnsupportedLookAndFeelException ex) {
                    System.err.println("LOOK AND FEEL NO COMPATIBLE!");
                }
            }
        }
    }//GEN-LAST:event_actionPerformedEvent

    private void jButtonAgregarXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarXActionPerformed
        if (viendoCartelera) {
            //Abrir ventana para agregar Película
            String nombrePeli = Vistas.mostrarInputGUI(rootPane, "Nombre de la nueva Pelicula:");
            NuevaPelicula nuevaPeli = new NuevaPelicula(this, true, nombrePeli);
            nuevaPeli.setVisible(true);
        } else {
            NuevoTicket nuevoTicketWindow = new NuevoTicket(this, true);
            nuevoTicketWindow.setVisible(true);
        }
    }//GEN-LAST:event_jButtonAgregarXActionPerformed

    private void jMIgestionPeliculasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIgestionPeliculasActionPerformed
        //Abrir ventana para gestionar películas
        GestionPeliculas gestionPelisVentana = new GestionPeliculas(this, true);
    }//GEN-LAST:event_jMIgestionPeliculasActionPerformed

    private void jMInuevaPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMInuevaPeliculaActionPerformed
        //Abrir ventana para crear una nueva película (TODO -> Comprobación fecha de Estreno)
        String nombrePeli = Vistas.mostrarInputGUI(rootPane, "Título de la nueva Película:");
        NuevaPelicula nuevaP = new NuevaPelicula(this, true, nombrePeli);
        nuevaP.setVisible(true);
    }//GEN-LAST:event_jMInuevaPeliculaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        abrirAgregarCliente();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMIEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEditarClienteActionPerformed
        //Abrir ventana para modificar Clientes
        ModificarCliente ventModificarCli = new ModificarCliente(this, true);
        ventModificarCli.setVisible(true);
    }//GEN-LAST:event_jMIEditarClienteActionPerformed

    private void jTableListaTicketsPRESIONAA(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListaTicketsPRESIONAA
        if (evt.getKeyCode() == KeyEvent.VK_A) {
            System.out.println("Se ha presionado la tecla A. Se ha abierto el menú de Alta Clientes...");
        }
    }//GEN-LAST:event_jTableListaTicketsPRESIONAA

    private void jTableListaTicketsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListaTicketsKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
            jButtonAgregarX.setEnabled(true);
            break;
            case KeyEvent.VK_A:
            abrirAgregarCliente();
            break;
            case KeyEvent.VK_S:
            salirPrograma();
            break;
        }
    }//GEN-LAST:event_jTableListaTicketsKeyPressed

    /**
     * Devuelve un string codificado en SHA256 representando 
     * @return 
     */
    public String getUserSHA() {
        return this.usuario;
    }
    
    private void jButtonToggleMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToggleMainActionPerformed
        toggleVistaCartelera();
        toggleVistaBotones();
    }//GEN-LAST:event_jButtonToggleMainActionPerformed

    private void jMenuPeliculasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuPeliculasMouseEntered
        jMenuPeliculas.setForeground(new Color(0, 255, 175));
    }//GEN-LAST:event_jMenuPeliculasMouseEntered

    private void jMenuPeliculasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuPeliculasMouseExited
        jMenuPeliculas.setForeground(Color.BLACK);
    }//GEN-LAST:event_jMenuPeliculasMouseExited

    private void jMenuAyudaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAyudaMouseEntered
        jMenuAyuda.setForeground(new Color(255, 125, 125));
    }//GEN-LAST:event_jMenuAyudaMouseEntered

    private void jMenuAyudaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAyudaMouseExited
        jMenuAyuda.setForeground(Color.BLACK);
    }//GEN-LAST:event_jMenuAyudaMouseExited

    private void jButtonEliminarXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarXActionPerformed
            //ELIMINAR PELICULA si estamos en la vista de CARTELERA
            if (viendoCartelera) {
                String codPelicula = JOptionPane.showInputDialog("Código de la Pelicula (codPelicula) a ELIMINAR: [0 para cancelar]");
                if (codPelicula == null) {
                    System.err.println("Acción de eliminar Película cancelada");
                    return;
                }
                if (codPelicula.isBlank()) {
                    System.err.println("Acción de eliminar Película cancelada. Nada introducido en el campo de texto");
                    return;
                }
                while (!codPelicula.matches("[0-9]+")) {
                    System.err.println("ERROR. Introduzca un número de Película válido (0 para cancelar)");
                    codPelicula = JOptionPane.showInputDialog("Introduce el Código de Película a ELIMINAR:");
                }
                if ("0".equals(codPelicula) || Integer.parseInt(codPelicula) <= 0) {
                    System.out.println("Operación para eliminar película cancelada.");
                    return;
                }

                //Convertir el idTicket a Int
                int codPeliculant = Integer.parseInt(codPelicula);

                try {
                    Pelicula eliminada = ControladorPeliculas.eliminarPeliculaPorCOD(codPeliculant);
                    if (eliminada != null) {
                        Vistas.mostrarMensajeGUI(rootPane, "PELÍCULA ELIMINADA!", "La película " + eliminada.getTitulo() + "(" + eliminada.getAnio() + ") ha sido eliminada "
                                + "correctamente!");
                    } else {
                        Vistas.mostrarErrorGUI(rootPane, "ERROR AL ELIMINAR!", "ERROR durante la ELIMINACIÓN sobre la Base de Datos. Compruebe su conexión e inténtelo de nuevo!");
                    }
                } catch(Exception e) {
                    Vistas.mostrarErrorGUI(rootPane, "PELÍCULA NO ENCONTRADA", "La película que se ha intentado borrar puede que ya haya sido emitida/eliminada! Actualizando la tabla...");
                }

                actualizarListaESTRENOS();
                return;
            }
        //ELIMINAR TICKET si no estamos en la vista de CARTELERA
        String idTicket = JOptionPane.showInputDialog("Introduce el ID del ticket a ELIMINAR: [0 para cancelar]");
                if (idTicket == null) {
                    System.err.println("Acción de eliminar Ticket cancelada");
                    return;
                }
                if (idTicket.isBlank()) {
                    System.err.println("Acción de eliminar Ticket cancelada. Nada introducido en el campo de texto");
                    return;
                }
        while (!idTicket.matches("[0-9]+")) {
            System.err.println("ERROR. Introduzca un número de Ticket válido (0 para cancelar)");
            idTicket = JOptionPane.showInputDialog("Introduce el ID del ticket a ELIMINAR:");
        }
        if (idTicket == "0") {
            System.out.println("Operación para eliminar ticket cancelada.");
            return;
        }
        
        //Convertir el ID a Int
        int idTicketo = Integer.parseInt(idTicket);
        
        //Eliminar el ticket por ID seleccionado
        try {
            ControladorTickets.eliminarTicketPorID(idTicketo);
        } catch(Exception e) {
            Vistas.mostrarErrorGUI(rootPane, "TICKET NO ENCONTRADO", "El ticket especificado no está en la lista! Actualizando la tabla...");
        }
        
        actualizarListaTICKETS();
    }//GEN-LAST:event_jButtonEliminarXActionPerformed

    //CON ESTOS EVENTOS SE EVITA EL CAMBIO DEL L&F A TRAVÉS DEL TECLADO, YA QUE SI SE CAMBIA MUY RÁPIDO PUEDE SALTAR EXCEPCIÓN DEBIDO AL MÉTODO REPAINT() EN EL COMBOBOX
    private void jComboBox1LookAndFeelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1LookAndFeelKeyReleased
        evt.consume();
    }//GEN-LAST:event_jComboBox1LookAndFeelKeyReleased

    private void jComboBox1LookAndFeelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1LookAndFeelKeyPressed
        evt.consume();
    }//GEN-LAST:event_jComboBox1LookAndFeelKeyPressed

    private void jComboBox1LookAndFeelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1LookAndFeelKeyTyped
        evt.consume();
    }//GEN-LAST:event_jComboBox1LookAndFeelKeyTyped

    private void jMenuConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuConfigActionPerformed
        
    }//GEN-LAST:event_jMenuConfigActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new LoginPrincipal().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pantallaPpal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pantallaPpal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pantallaPpal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pantallaPpal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantallaPpal().setVisible(true);
            }
        });
    }
    
    public void toggleVistaCartelera() {
        viendoCartelera = !(viendoCartelera);
        
        //MOSTRAR CARTELERA
        if (viendoCartelera) {
            jButtonToggleMain.setText("VER TICKETS");
            if (modeloTablaESTRENOS == null) {
                inicializarTablaESTRENOS();
            }
            //CAMBIA MODELO Y RECARGA LA TABLA
            jTableListaTickets.setModel(modeloTablaESTRENOS);
            try {
                jButtonToggleMain.setIcon(new ImageIcon(ImageIO.read(
                    new File("src/GUI/imgs/actualizarMain2.png"))));
                jButtonToggleMain.repaint();
                //Thread.sleep(100);
                jButtonToggleMain.setIcon(new ImageIcon(ImageIO.read(
                    new File("src/GUI/imgs/actualizarMain.png"))));
                jButtonToggleMain.repaint();
                actualizarListaESTRENOS();
            } catch (IOException ioe) {
                System.err.println("ERROR al actualizar la imágen!");
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
            return;
        }
        //MOSTRAR TICKETS
        jButtonToggleMain.setText("VER CARTELERA");
        //CARGA MODELO Y RECARGA LA TABLA
        jTableListaTickets.setModel(modeloTablaTICKETS);
        try {
            jButtonToggleMain.setIcon(new ImageIcon(ImageIO.read(
                new File("src/GUI/imgs/actualizarMain2.png"))));
            jButtonToggleMain.repaint();
            //Thread.sleep(100);
            jButtonToggleMain.setIcon(new ImageIcon(ImageIO.read(
                new File("src/GUI/imgs/actualizarMain.png"))));
            jButtonToggleMain.repaint();
            actualizarListaTICKETS();
        } catch (IOException ioe) {
            System.err.println("ERROR al actualizar la imágen!");
        }
        
    }
    
    public void toggleVistaBotones() {
        if (!viendoCartelera) {
            this.jButtonAgregarX.setText("SACAR UN TICKET");
            this.jButtonEliminarX.setText("ELIMINAR UN TICKET");
        } else {
            this.jButtonAgregarX.setText("AGREGAR PELÍCULA");
            this.jButtonEliminarX.setText("ELIMINAR UNA PELÍCULA");
        }
    }
    
    /**
     * Habilitará el acceso a la ayuda de JavaHelp para esta ventana de la aplicación.
     */
    private void cargarAyudaJH() {
        try {
            // Carga el fichero de 'script' de ayuda (help.hs)
            File fichero = new File("src" + File.separator + "help" + File.separator + "help.hs");
            //System.out.println(String.valueOf(fichero.canRead())); //this was schtupid
            URL hsURL = fichero.toURI().toURL();

            // Crea el HelpSet y el HelpBroker
            HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();

            // Activar la ayuda para cada elemento que deseemos que la tenga asociada
            hb.enableHelpOnButton(jMenuItemAyuda, "manual", helpset);
            hb.enableHelpKey(this.getContentPane(), "manual", helpset); //panel con el foco default
            hb.enableHelpKey(jTableListaTickets, "ayudaTabla", helpset);
        } catch (HelpSetException hsExc) {
            System.err.println(hsExc.getMessage());
        } catch (MalformedURLException urlErr) {
            System.err.println("Formato de URL incorrecto!");
            System.err.println(urlErr.getMessage());
        }
    }
    
    public void inicializarTablaTICKETS() {
        modeloTablaTICKETS = new DefaultTableModel();
        String[] cabecera = {"ID_Ticket", "Pelicula", "Fecha_Emision", "Usuario_Compra"};
        
        modeloTablaTICKETS.setColumnIdentifiers(cabecera);
        
        //Para mostrar los TICKETS necesitamos datos de la Tabla CLIENTES (en toArrayString() de los Ticket's)
        try {
            ControladorClientes.getListaCliente(); // para actualizar la lista de Clientes
        } catch (ErrorListadoClientesException errorListado) {
            System.err.println(errorListado.getMessage());
        }
        jTableListaTickets.setModel(modeloTablaTICKETS);
        actualizarListaTICKETS();
        
    }
    
    public void inicializarTablaESTRENOS() {
        modeloTablaESTRENOS = new DefaultTableModel();
        String[] cabecera = {"Titulo", "Género", "Fecha_Emisión", "Año", "Cod_Pelicula"};
        
        modeloTablaESTRENOS.setColumnIdentifiers(cabecera);
        
        jTableListaTickets.setModel(modeloTablaESTRENOS);
        actualizarListaESTRENOS();
    }
    
    public void abrirAgregarCliente() {
        AltaCliente dialogo = new AltaCliente(this, true);
        dialogo.setVisible(true);
    }
    
    public void salirPrograma() {
        if (JOptionPane.showConfirmDialog(rootPane, "¿Seguro que quiere salir de la Aplicación?", "Salir", JOptionPane.OK_CANCEL_OPTION) != JOptionPane.CANCEL_OPTION){
            this.setVisible(false);
            this.dispose();
            System.exit(0);
        }
    }
    
    public void nuevaPelicula(Pelicula nuevaP) {
        DefaultTableModel modeloTab = (DefaultTableModel) jTableListaTickets.getModel();
        modeloTab.addRow(nuevaP.toArrayString());
    }
    
    /**
     * Leerá la lista desde el ControladorTickets, y actualizará la GUI de la Tabla para reflejarla
     */
    public void actualizarListaTICKETS() {
        //No hacer nada si estamos viendo la tabla de Peliculas ya que se actualizan cada vez que cambiamos entre una y otra.
        if (viendoCartelera) {
            return;
        }
        this.jButtonEliminarX.setEnabled(false);
        //Limpiar primero la tabla, después volver a rellenarla
        int numFilas = modeloTablaTICKETS.getRowCount();
        while (numFilas != 0) {
            modeloTablaTICKETS.removeRow(0);
            numFilas = modeloTablaTICKETS.getRowCount();
        }
        List<Ticket> listaTickets = ControladorTickets.getListaTickets();
        for (Ticket t: listaTickets) {
            modeloTablaTICKETS.addRow(t.toArrayString());
        }
        this.jTableListaTickets.setModel(modeloTablaTICKETS);
        //Comprobar si la tabla (su modelo) está vacía, si lo está, deshabilitar el botón para ELIMINAR TICKET.
        if (modeloTablaTICKETS.getRowCount() == 0) {
            this.jButtonEliminarX.setEnabled(false);
        } else {
            this.jButtonEliminarX.setEnabled(true);
        }
    }
    
    /**
     * Leerá la lista desde el ControladorPeliculas, y actualizará la GUI de la Tabla para reflejarla
     */
    public void actualizarListaESTRENOS() {
        if (!viendoCartelera) {
            return;
        }
        this.jButtonEliminarX.setEnabled(true);
        //Limpiar primero la tabla, despues volver a rellenarla
        int numFilas = modeloTablaESTRENOS.getRowCount();
        while (numFilas != 0) {
            modeloTablaESTRENOS.removeRow(0);
            numFilas = modeloTablaESTRENOS.getRowCount();
        }
        List<Pelicula> listaPeliculas = ControladorPeliculas.getListaPeliculas();
        if (listaPeliculas == null) {
            Vistas.mostrarErrorGUI(rootPane, "SERVER DESCONECTADO", 
                    "Se ha perdido la conexión con el servidor\n"
                    + "Inténtelo de nuevo más tarde");
            return;
        }
        for (Pelicula p: listaPeliculas) {
            modeloTablaESTRENOS.addRow(p.toArrayString());
        }
        this.jTableListaTickets.setModel(modeloTablaESTRENOS);
        if (modeloTablaESTRENOS.getRowCount() == 0) {
            this.jButtonEliminarX.setEnabled(false);
        }
    }
    
    public String[][] getListaTickets() {
        TableModel actual = jTableListaTickets.getModel();
        int numFilas = actual.getRowCount();
        int numColumnas = actual.getColumnCount();
        
        String[][] datosTickets = new String[numFilas][numColumnas];
        String datoLeyendo = "";
        for (int i=0; i<numFilas; i++) {
            for (int j=0; j<numColumnas; j++) {
                datosTickets[i][j] = String.valueOf(actual.getValueAt(i, j));
            }
        }
        
        return datosTickets;
    }
    
    //Como los datos de los clientes nos vienen en el mismo orden de la tabla, podemos
    // eliminar según la fila seleccionada en el jComboBox que elimina (el que llama desde EliminarCliente.java)
    public boolean borrarUsuario(int row) {
        int numColumns = this.jTableListaTickets.getModel().getColumnCount();
        TableModel modeloT = this.jTableListaTickets.getModel();
        for (int i = numColumns; i != 0; i--) {
            modeloT.setValueAt(null, row, i-1);
        }
        DefaultTableModel modeloT2 = (DefaultTableModel) modeloT;
        modeloT2.removeRow(row);
        
        return true;
    }
    
    public void empezarModificacion(Cliente c) {
        System.out.println(c);
        ModificarCliente2 ventanaMod = new ModificarCliente2(this, true, c);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pruebaimageresize_cambio.CustomJLabelImagen customFotoPerfil;
    private javax.swing.JButton jButtonAgregarX;
    private javax.swing.JButton jButtonEliminarX;
    private javax.swing.JButton jButtonToggleMain;
    private javax.swing.JComboBox<String> jComboBox1LookAndFeel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMIEditarCliente;
    private javax.swing.JMenuItem jMIEliminarCliente;
    private javax.swing.JMenuItem jMIgestionPeliculas;
    private javax.swing.JMenuItem jMInuevaPelicula;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuClientes;
    private javax.swing.JMenuItem jMenuConfig;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemAyuda;
    private javax.swing.JMenu jMenuPeliculas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTableListaTickets;
    // End of variables declaration//GEN-END:variables
}
